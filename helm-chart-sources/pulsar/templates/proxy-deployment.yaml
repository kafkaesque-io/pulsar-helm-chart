#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

{{- if .Values.extra.proxy }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ template "pulsar.fullname" . }}-{{ .Values.proxy.component }}"
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ template "pulsar.name" . }}
    chart: {{ template "pulsar.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    component: {{ .Values.proxy.component }}
    cluster: {{ template "pulsar.fullname" . }}
spec:
  replicas: {{ .Values.proxy.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "pulsar.name" . }}
      release: {{ .Release.Name }}
      component: {{ .Values.proxy.component }}
  {{- if .Values.proxy.updateStrategy }}
  strategy:
{{ toYaml .Values.proxy.updateStrategy | indent 4 }}
  {{- end }}
  template:
    metadata:
      labels:
        app: {{ template "pulsar.name" . }}
        release: {{ .Release.Name }}
        component: {{ .Values.proxy.component }}
        cluster: {{ template "pulsar.fullname" . }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/proxy-configmap.yaml") . | sha256sum }}
{{ toYaml .Values.proxy.annotations | indent 8 }}
    spec:
      {{- if .Values.extra.kubectlProxy }}
      serviceAccountName: "{{ template "pulsar.fullname" . }}-kubectl-proxy"
      {{- end }}
    {{- if (.Values.nodeSelector) and (eq .Values.proxy.nodeSelector false) }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
    {{- end }}
    {{- if .Values.proxy.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.proxy.nodeSelector | indent 8 }}
    {{- end }}
    {{- if .Values.proxy.tolerations }}
      tolerations:
{{ toYaml .Values.proxy.tolerations | indent 8 }}
    {{- end }}
      affinity:
        {{- if .Values.proxy.preferredZone }}
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
              - key: failure-domain.beta.kubernetes.io
                operator: In
                values:
                - {{ .Values.proxy.preferredZone }}
        {{- end }}
        {{- if .Values.enableAntiAffinity }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: "app"
                operator: In
                values:
                - "{{ template "pulsar.name" . }}"
              - key: "release"
                operator: In
                values:
                - {{ .Release.Name }}
              - key: "component"
                operator: In
                values:
                - {{ .Values.proxy.component }}
            topologyKey: "kubernetes.io/hostname"
        {{- end }}
      terminationGracePeriodSeconds: {{ .Values.proxy.gracePeriod }}
      {{- if or .Values.enableTls (or .Values.enableTokenAuth .Values.proxy.initContainer) }}
      volumes:
      {{- end }}
        {{- if .Values.enableTls }}
        - name: certs
          secret:
            secretName: "{{ .Values.tlsSecretName }}"           
        {{- end }}
        {{- if .Values.enableTokenAuth }}
        - name: token-public-key
          secret:
            secretName: token-public-key
        - name: token-private-key
          secret:
            secretName: token-private-key
        - name: token-proxy
          secret:
            secretName: token-proxy
        - name: token-websocket
          secret:
            secretName: token-websocket
        {{- end }}
        {{- if .Values.proxy.initContainer }}
        - name: lib-data
          emptyDir: {}
        {{- end }}
      initContainers:
      # This init container will wait for bookkeeper to be ready before
      # deploying the booproxykies
      - name: wait-bookkeeper-ready
        image: "{{ .Values.image.proxy.repository }}:{{ .Values.image.proxy.tag }}"
        imagePullPolicy: {{ .Values.image.proxy.pullPolicy }}
        command: ["sh", "-c"]
        args:
          - >-
            until nslookup {{ template "pulsar.fullname" . }}-{{ .Values.bookkeeper.component }}-{{ add (.Values.bookkeeper.replicaCount | int) -1 }}.{{ template "pulsar.fullname" . }}-{{ .Values.bookkeeper.component }}.{{ .Release.Namespace }}; do
              sleep 3;
            done;
      {{- if .Values.proxy.initContainer }}
      - name: add-libs
        image: "{{ .Values.proxy.initContainer.repository }}:{{ .Values.proxy.initContainer.tag }}"
        imagePullPolicy: "{{ .Values.proxy.initContainer.pullPolicy }}"
        {{- if  .Values.proxy.initContainer.command }}
        command:
{{ toYaml .Values.proxy.initContainer.command | indent 10 }}
        {{- end }}
        {{- if  .Values.proxy.initContainer.args }}
        args:
{{ toYaml .Values.proxy.initContainer.args | indent 10 }}
        {{- end }}
        volumeMounts:
          - name: lib-data
            mountPath: /jars
      {{- end }}
      containers:
{{- if .Values.extra.kubectlProxy }}
      - name: "{{ template "pulsar.fullname" . }}-kubectl-proxy"
        image: "{{ .Values.image.kubectlProxy.repository }}:{{ .Values.image.kubectlProxy.tag }}"
        imagePullPolicy: {{ .Values.image.kubectlProxy.pullPolicy }}
      {{- if .Values.proxy.kproxyResources }}
        resources:
{{ toYaml .Values.proxy.kProxyResources | indent 10 }}
      {{- end }}
        ports:
        - name: http
          containerPort: 8101
{{- end }}
      - name: "{{ template "pulsar.fullname" . }}-{{ .Values.proxy.component }}"
        image: "{{ .Values.image.proxy.repository }}:{{ .Values.image.proxy.tag }}"
        imagePullPolicy: {{ .Values.image.proxy.pullPolicy }}
        {{- if .Values.proxy.probe }}
        readinessProbe:
          tcpSocket:
          {{- if .Values.proxy.probe.port }}
            port: {{ .Values.proxy.probe.port }}
          {{- else }}
            {{- if .Values.enableTls }}
            port: 8443
            {{- else }}
            port: 8080
            {{- end }}
          {{- end }}
          initialDelaySeconds: {{ .Values.proxy.probe.initial }} 
          periodSeconds:  {{ .Values.proxy.probe.period }} 
        {{- end }}
      {{- if .Values.proxy.resources }}
        resources:
{{ toYaml .Values.proxy.resources | indent 10 }}
      {{- end }}
        command: ["sh", "-c"]
        args:
        - >
          bin/apply-config-from-env.py conf/proxy.conf &&
          bin/apply-config-from-env.py conf/pulsar_env.sh &&
          {{- if .Values.enableTls }}
          openssl pkcs8 -topk8 -inform PEM -outform PEM -in /pulsar/certs/tls.key -out /pulsar/tls-pk8.key -nocrypt &&
          {{- end }}
          exec bin/pulsar proxy
        ports:
        - name: http
          containerPort: 8080
        {{- if or (or .Values.enableTls .Values.enableTokenAuth) .Values.proxy.initContainer }}
        volumeMounts:
        {{- end }}
          {{- if .Values.enableTls }}
          - name: certs
            readOnly: true
            mountPath: /pulsar/certs
          {{- end }}
          {{- if .Values.enableTokenAuth }}
          - mountPath: "/pulsar/token-public-key"
            name: token-public-key
            readOnly: true
          - mountPath: "/pulsar/token-proxy"
            name: token-proxy
            readOnly: true
          {{- end }}
          {{- if .Values.proxy.initContainer }}
          - name: lib-data
            mountPath: "/jars"
          {{- end }}
        envFrom:
        - configMapRef:
            name: "{{ template "pulsar.fullname" . }}-{{ .Values.proxy.component }}"
{{- if .Values.extra.wsproxy }}
      - name: "{{ template "pulsar.fullname" . }}-{{ .Values.proxy.component }}-ws"
        image: "{{ .Values.image.proxy.repository }}:{{ .Values.image.proxy.tag }}"
        imagePullPolicy: {{ .Values.image.proxy.pullPolicy }}
      {{- if .Values.proxy.wsResources }}
        resources:
{{ toYaml .Values.proxy.wsResources | indent 10 }}
      {{- end }}
        command: ["sh", "-c"]
        args:
        - >
          {{- if .Values.enableTokenAuth }}
          echo "tokenPublicKey=" >> /pulsar/conf/websocket.conf &&
          {{- end }}
          bin/apply-config-from-env.py conf/websocket.conf &&
          bin/apply-config-from-env.py conf/pulsar_env.sh &&
          {{- if .Values.enableTls }}
          openssl pkcs8 -topk8 -inform PEM -outform PEM -in /pulsar/certs/tls.key -out /pulsar/tls-pk8.key -nocrypt &&
          {{- end }}
          bin/pulsar websocket
        ports:
        - name: http
          containerPort: 8080
        {{- if or .Values.enableTls .Values.enableTokenAuth }}
        volumeMounts:
        {{- end }}
          {{- if .Values.enableTls }}
          - name: certs
            readOnly: true
            mountPath: /pulsar/certs
          {{- end }}
          {{- if .Values.enableTokenAuth }}
          - mountPath: "/pulsar/token-public-key"
            name: token-public-key
            readOnly: true
          - mountPath: "/pulsar/token-proxy"
            name: token-proxy
            readOnly: true
          - mountPath: "/pulsar/token-websocket"
            name: token-websocket
            readOnly: true
          {{- end }}
        envFrom:
        - configMapRef:
            name: "{{ template "pulsar.fullname" . }}-{{ .Values.proxy.component }}-ws"
{{- end }}
{{- if .Values.extra.wsAuthServer }}
      - name: "{{ template "pulsar.fullname" . }}-{{ .Values.proxy.component }}-wsauth"
        image: "{{ .Values.image.wsAuthProxy.repository }}:{{ .Values.image.wsAuthProxy.tag }}"
        imagePullPolicy: {{ .Values.image.wsAuthProxy.pullPolicy }}
      {{- if .Values.proxy.wsAuthResources }}
        resources:
{{ toYaml .Values.proxy.wsAuthResources | indent 10 }}
      {{- end }}
        ports:
        - name: wss
          containerPort: 8500 
        volumeMounts:
          - name: certs
            readOnly: true
            mountPath: /pulsar/certs
        env:
          - name: PORT
            value: "8500"
          - name: CA_PATH 
            value: /pulsar/certs/ca.crt
          - name: CERT_PATH 
            value: /pulsar/certs/tls.crt
          - name: KEY_PATH 
            value: /pulsar/certs/tls.key
          - name: TARGET_URL 
            value: ws://localhost:8000 
          - name: FUNC_URL 
            value: "http://{{ template "pulsar.fullname" . }}-{{ .Values.function.component }}:6750"
          - name: TOKEN_SERVER_URL
            value: http://localhost:8084
{{- end }}
{{- if .Values.extra.tokenServer }}
      - name: "{{ template "pulsar.fullname" . }}-{{ .Values.proxy.component }}-tokenserver"
        image: "{{ .Values.image.tokenServer.repository }}:{{ .Values.image.tokenServer.tag }}"
        imagePullPolicy: {{ .Values.image.tokenServer.pullPolicy }}
      {{- if .Values.proxy.tokenResources }}
        resources:
{{ toYaml .Values.proxy.tokenResources | indent 10 }}
      {{- end }}
        ports:
        - name: tokenproxy
          containerPort: 8084
        volumeMounts:
          - name: certs
            readOnly: true
            mountPath: /pulsar/certs
          - mountPath: "/pulsar/token-private-key"
            name: token-private-key
            readOnly: true
          - mountPath: "/pulsar/token-public-key"
            name: token-public-key
            readOnly: true
        env:
          - name: ROLES
            value: {{ .Values.tokenServer.allowedRoles }}
{{- end }}
{{- end }}
